/*
 * Copyright (c) 2021 weteor
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0

// repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_slash {
            timeout-ms = <50>;
            key-positions = <0 13>;
            bindings = <&kp SLASH>;
            };
        combo_lBracket {
            timeout-ms = <50>;
            key-positions = <1 14>;
            bindings = <&kp LEFT_BRACKET>;
            };
        combo_lBrace {
            timeout-ms = <50>;
            key-positions = <2 15>;
            bindings = <&kp LEFT_BRACE>;
            };
        combo_lParanthesis {
            timeout-ms = <50>;
            key-positions = <3 16>;
            bindings = <&kp LEFT_PARENTHESIS>;
            };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <4 17>;
            bindings = <&kp EQUAL>;
            };

        combo_asterix {
            timeout-ms = <50>;
            key-positions = <5 18>;
            bindings = <&kp ASTERISK>;
            };

        combo_rParanthesis {
            timeout-ms = <50>;
            key-positions = <6 19>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            };
        combo_rBrace {
            timeout-ms = <50>;
            key-positions = <7 20>;
            bindings = <&kp RIGHT_BRACE>;
            };
        combo_rBracket {
            timeout-ms = <50>;
            key-positions = <8 21>;
            bindings = <&kp RIGHT_BRACKET>;
            };
        combo_bSlash {
            timeout-ms = <50>;
            key-positions = <9 22>;
            bindings = <&kp BACKSLASH>;
            };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
            };
        combo_backspace {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp BACKSPACE>;
            };
        combo_backspaceNP {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp BACKSPACE>;
            };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESCAPE>;
            };

    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <180>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    
// COMBOS
// vertical
// -------------------------------     -------------------------------
// |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  | 
// |  /  |  [  |  {  |  (  |  =  |     |  *  |  )  |  }  |  ]  |  \  |  
// |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  '  | 
// others:
// Q + W - escape
// W + E - tab
// I + O - backspace
// C + , - word caps
// both inner thumbs -> Layer CFG
// both left thumbs  -> Layer BLE

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
            &kp KP_N7     &kp KP_N8        &kp KP_N9    &kp Q        &kp W       &kp F       &kp P       &kp G                        &kp J       &kp L       &kp U       &kp Y       &kp QUOT        
            &kp KP_N4     &kp KP_N5        &kp KP_N6    &hm LSHFT A  &hm LGUI R  &hm LALT S  &hm LCTRL T &kp D         &kp N7         &kp H       &hm RCTRL N &hm RALT E  &hm RGUI I  &hm RSHFT O     
            &kp KP_N1     &kp KP_N2        &kp KP_N3    &kp Z        &kp X       &kp C       &kp V       &kp B    &kp N3    &kp N4    &kp K       &kp M       &kp COMMA   &kp DOT     &kp SEMI        
            &kp KP_DOT    &kp KP_MULTIPLY  &kp KP_PLUS  &kp N1       &kp N2                                                                                               &kp KP_ENTER &kp KP_N0       
                                          &kp SPACE  &kp SPACE                    &kp SPACE   &kp SPACE
            >;
        };

    };
};


